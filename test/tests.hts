# This file is valid Haskenthetical syntax, but not directly interpreted as
# Haskenthetical. Rather, it's split at the `# # #` lines, and each segment
# represents a test of some aspect of the Haskenthetical compiler.

# # #

(has-type Float 3)

# # #

(has-type String "foo")

# # #

(has-type (-> Float Float) (+ 1))

# # #

(compile-fails-with CEUnificationFail (λ f (, (f 3) (f ""))))

# # #

(has-type Float (+ 1 2))

# # #

(has-type (, Float Float)
  (def const3 (λ x 3))
  (, (const3 "foo") (const3 4)))

# # #

(compile-fails-with CEUnificationFail
  (type (Maybe $a) Nothing (Just $a))
  (if~ (Just "foo") (Just (: $x Float)) 3 1))

# # #

(pending "Not yet implemented"
  (compile-fails-with Something-Not-Decided-Yet
    (type (Maybe $a) Nothing (Just $a))
    (if~ Just Just 1 0)))

# # #

(eval-fails-with "foo" (error! "foo"))

# # #

(returns 1 (if~ 0 0 1 (error! "foo")))

# # #

(eval-fails-with "foo" (if~ 0 1 1 (error! "foo")))

# # #

(returns (, 0 (, 3 8))
  (def sum (elim-List 0 (λ (n l) (+ n (sum l)))))
  (, (sum Nil)
     (, (sum (Cons 3 Nil))
        (sum (Cons 3 (Cons 5 Nil))))))
